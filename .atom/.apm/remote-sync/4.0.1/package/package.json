{"name":"remote-sync","version":"4.0.1","description":"Upload your files to remote host after every change. Both SCP/SFTP and FTP are supported.","license":"MIT","repository":{"type":"git","url":"git+https://github.com/yongkangchen/remote-sync.git"},"main":"index.coffee","engines":{"atom":">=0.78"},"dependencies":{"async":"^0.2","atom-message-panel":"^1.1.1","atom-space-pen-views":"^2.0.3","chokidar":"^1.4.3","fs-plus":"^2.1","ftp":"^0.3.7","minimatch":"^0.2","mkdirp":"^0.3","ssh2":"^0.2"},"readme":"# Atom Remote Sync\nThis package provides functionality for:\n- Uploading changes automatically when you save a file\n- Uploading/downloading files to/from the server\n- Displaying diffs between the local and remote files with your favourite diff tool\n- Monitoring files for external change and automatically upload\n- set difftoolCommand in AtomSettingView of `remote-sync` -- The path to your diff tool executable\n\nCurrently, both SCP/SFTP and FTP are supported.\n\n## Installation\nYou can install this like any other Atom package, with one of these methods:\n- Open your settings in Atom, select the \"Install\" tab, search for \"remote-sync\", and click install on it\n- Run `apm install remote-sync` in a terminal\n- Download or clone this repository to your `~/.atom/packages/` directory and enter the directory run `apm install`\n\n## Usage\nCreate file `.remote-sync.json` in your project root with these settings:\n- `transport` -- `scp` for SCP/SFTP, or `ftp` for FTP\n- `hostname` -- Remote host address\n- `port` - Remort port to connect on (typically 22 for SCP/SFTP, 21 for FTP)\n- `username` -- Remote host username\n- `password` -- Remote host password\n- `keyfile` -- Absolute path to SSH key (only used for SCP)\n- `passphrase` -- Passphrase for the SSH key (only used for SCP)\n- `useAgent` -- Whether or not to use an agent process, default: false (only used for SCP)\n- `target` -- Target directory on remote host\n- `source` -- Source directory relative to project root\n- `ignore` -- Array of [minimatch](https://github.com/isaacs/minimatch) patterns of files to ignore\n- `uploadOnSave` -- Whether or not to upload the current file when saved, default: false\n- `useAtomicWrites` -- Upload file using a temporary filename before moving to its final location (only used for SCP), default: false\n- `uploadMirrors` -- transport mirror config array when upload\n- `deleteLocal` - whether or not to delete the local file / folder after remote delete\n- `saveOnUpload` - Whether or not to save a modified file before uploading, default: false\n\nSCP example:\n\n```json\n{\n  \"transport\": \"scp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 22,\n  \"username\": \"vagrant\",\n  \"password\": \"vagrant\",\n  \"keyfile\": \"/home/vagrant/.ssh/aws.pem\",\n  \"passphrase\": \"your_passphrase\",\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ]\n}\n```\n\nSCP `useAgent` example:\n\n```json\n{\n  \"transport\": \"scp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 22,\n  \"username\": \"vagrant\",\n  \"useAgent\": true,\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ]\n}\n```\n\nFTP example:\n\n```json\n{\n  \"transport\": \"ftp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 21,\n  \"username\": \"vagrant\",\n  \"password\": \"vagrant\",\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ]\n}\n```\n\nUpload mirrors example:\n\n```json\n{\n  \"transport\": \"scp\",\n  \"hostname\": \"10.10.10.10\",\n  \"port\": 22,\n  \"username\": \"vagrant\",\n  \"password\": \"vagrant\",\n  \"keyfile\": \"/home/vagrant/.ssh/aws.pem\",\n  \"passphrase\": \"your_passphrase\",\n  \"target\": \"/home/vagrant/dirname/subdirname\",\n  \"ignore\": [\n    \".remote-sync.json\",\n    \".git/**\"\n  ],\n  \"uploadMirrors\":[\n    {\n      \"transport\": \"scp\",\n      \"hostname\": \"10.10.10.10\",\n      \"port\": 22,\n      \"username\": \"vagrant\",\n      \"password\": \"vagrant\",\n      \"keyfile\": \"/home/vagrant/.ssh/aws.pem\",\n      \"passphrase\": \"your_passphrase\",\n      \"target\": \"/home/vagrant/dirname/subdirname_one\",\n      \"ignore\": [\n        \".remote-sync.json\",\n        \".git/**\"\n      ]\n    },\n    {\n      \"transport\": \"ftp\",\n      \"hostname\": \"10.10.10.10\",\n      \"port\": 21,\n      \"username\": \"vagrant\",\n      \"password\": \"vagrant\",\n      \"target\": \"/home/vagrant/dirname/subdirname_two\",\n      \"ignore\": [\n        \".remote-sync.json\",\n        \".git/**\"\n      ]\n    }\n  ]\n}\n```\n\n## Usage example\n### Existing project\n1. Add a file named `.remote-sync.json` to your project, with the contents above\n2. Open the command palette by pressing cmd + shift + P on a Mac, or ctrl + shift + P on Linux/Windows\n3. Type in `remote sync reload config` and press enter\n\nThat's it!\n\n### From scratch, with a remote server\n1. Create a folder for your project, and create a file named `.remote-sync.json` in it with the contents above\n2. In the Atom editor, open the command palette by pressing cmd + shift + P on a Mac, or ctrl + shift + P on Linux/Windows\n3. Type in `remote sync reload config` and press enter\n4. Open the command palette again\n5. Input `remote sync download all`\n\nThe package will download all of the files from the remote server for you.\n\n# Make a donation via Paypal ![Make a donation via Paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)\nClick 'Send Money' after login PayPal, and my PayPal account is: lx1988cyk#gmail.com\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/yongkangchen/remote-sync/issues"},"homepage":"https://github.com/yongkangchen/remote-sync#readme","_id":"remote-sync@4.0.1","_shasum":"7dc5823971959bf8ce79560c4e778d37ae3fd362","_resolved":"file:../d-116326-9574-1nvugis/package.tgz","_from":"../d-116326-9574-1nvugis/package.tgz"}